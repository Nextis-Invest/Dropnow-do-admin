// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User model with role-based access control
model User {
  id            String    @id @default(cuid())
  clerkId       String    @unique
  email         String    @unique
  firstName     String
  lastName      String
  phone         String?
  role          Role      @default(PASSENGER)
  clientId String?
  client  Client? @relation(fields: [clientId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  chauffeurProfile Chauffeur?
  rides         Ride[]    @relation("PassengerRides")
  assignedRides Ride[]    @relation("AssignedRides")
  bookings      Booking[]
  eventParticipations EventParticipant[]
}

enum Role {
  ADMIN
  SALES
  CUSTOMER
  PASSENGER
  PLANNING
  DISPATCHER
  FIELD_MANAGER
  FIELD_ASSISTANT
  CHAUFFEUR
}

// Client model for managing client companies
model Client {
  id            String    @id @default(cuid())
  clerkId       String?   @unique // Clerk organization ID
  name          String
  slug          String?   @unique // Clerk organization slug
  address       String?
  city          String?
  country       String?
  postalCode    String?
  phone         String?
  email         String?
  website       String?
  logoUrl       String?
  active        Boolean   @default(true)
  contractStart DateTime?
  contractEnd   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  users         User[]
  bookings      Booking[]
  billingInfo   BillingInfo?
  events        Event[]   // Client for events
}

// Billing information for clients
model BillingInfo {
  id              String       @id @default(cuid())
  clientId  String       @unique
  client    Client @relation(fields: [clientId], references: [id])
  billingAddress  String?
  billingCity     String?
  billingCountry  String?
  billingPostalCode String?
  taxId           String?
  paymentTerms    String?
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
}

// Chauffeur profile for users with CHAUFFEUR role
model Chauffeur {
  id            String    @id @default(cuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id])
  licenseNumber String
  licenseExpiry DateTime
  vehicleId     String?
  vehicle       Vehicle?  @relation(fields: [vehicleId], references: [id])
  status        ChauffeurStatus @default(AVAILABLE)
  rating        Float?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum ChauffeurStatus {
  AVAILABLE
  BUSY
  ON_BREAK
  OFF_DUTY
  ON_LEAVE
}

// Vehicle management
model Vehicle {
  id            String    @id @default(cuid())
  make          String
  model         String
  year          Int
  licensePlate  String    @unique
  color         String?
  capacity      Int       @default(4)
  vehicleType   VehicleType @default(SEDAN)
  status        VehicleStatus @default(AVAILABLE)
  lastMaintenance DateTime?
  chauffeurs    Chauffeur[]
  eventVehicles EventVehicle[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum VehicleType {
  SEDAN
  SUV
  VAN
  LUXURY
  LIMOUSINE
}

enum VehicleStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  OUT_OF_SERVICE
}

// Booking system
model Booking {
  id            String    @id @default(cuid())
  bookingNumber String    @unique @default(cuid())
  customerId    String
  customer      User      @relation(fields: [customerId], references: [id])
  clientId String?
  client  Client? @relation(fields: [clientId], references: [id])
  status        BookingStatus @default(PENDING)
  totalAmount   Decimal?  @db.Decimal(10, 2)
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  rides         Ride[]
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Individual rides within a booking
model Ride {
  id            String    @id @default(cuid())
  rideNumber    String    @unique @default(cuid())
  bookingId     String
  booking       Booking   @relation(fields: [bookingId], references: [id])
  passengerId   String
  passenger     User      @relation("PassengerRides", fields: [passengerId], references: [id])
  chauffeurId   String?
  chauffeur     User?     @relation("AssignedRides", fields: [chauffeurId], references: [id])
  pickupAddress String
  dropoffAddress String
  pickupTime    DateTime
  dropoffTime   DateTime?
  status        RideStatus @default(SCHEDULED)
  fare          Decimal?  @db.Decimal(10, 2)
  distance      Decimal?  @db.Decimal(10, 2)
  duration      Int?      // in minutes
  notes         String?
  missionId     String?   // Link to mission if part of one
  mission       Mission?  @relation(fields: [missionId], references: [id])
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum RideStatus {
  SCHEDULED
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

// Event System
model Event {
  id            String    @id @default(cuid())
  title         String
  description   String?
  clientId      String
  client        Client @relation(fields: [clientId], references: [id])
  startDate     DateTime
  endDate       DateTime
  status        EventStatus @default(PLANNED)
  location      String?

  // Pricing
  pricingType   EventPricingType @default(MISSION_BASED)
  fixedPrice    Decimal?  @db.Decimal(10, 2)
  totalFare     Decimal?  @db.Decimal(10, 2)  // Calculated from missions if MISSION_BASED

  notes         String?

  // Relations
  missions      Mission[]
  participants  EventParticipant[]
  eventVehicles EventVehicle[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum EventPricingType {
  MISSION_BASED    // Price calculated from sum of missions
  FIXED_PRICE      // Set price for entire event
}

model EventVehicle {
  id            String    @id @default(cuid())
  eventId       String
  event         Event     @relation(fields: [eventId], references: [id])
  vehicleId     String
  vehicle       Vehicle   @relation(fields: [vehicleId], references: [id])
  assignedAt    DateTime  @default(now())
  status        VehicleAssignmentStatus @default(ASSIGNED)
  notes         String?

  @@unique([eventId, vehicleId])
}

enum VehicleAssignmentStatus {
  ASSIGNED
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum EventStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model EventParticipant {
  id            String    @id @default(cuid())
  eventId       String
  event         Event     @relation(fields: [eventId], references: [id])
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  role          ParticipantRole
  status        InvitationStatus @default(PENDING)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([eventId, userId])
}

enum ParticipantRole {
  TEAM_MEMBER
  CHAUFFEUR
  PARTNER
  CLIENT
  PASSENGER
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Mission {
  id            String    @id @default(cuid())
  title         String
  description   String?
  eventId       String
  event         Event     @relation(fields: [eventId], references: [id])
  startDate     DateTime
  endDate       DateTime
  status        MissionStatus @default(PLANNED)
  location      String?
  fare          Decimal?  @db.Decimal(10, 2)
  notes         String?
  rides         Ride[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum MissionStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
